blueprint:
  name: Dimmer Switch â€“ Area Control with Scenes
  description: >
    Control lights and scenes in a specified area using the Philips Hue Dimmer Switch,
    replicating the default behavior of the Philips Hue app, including cycling scenes.
  domain: automation
  input:
    area:
      name: Area
      description: The area whose lights and scenes will be controlled by the dimmer switch.
      selector:
        area:
          multiple: false
    dimmer_device:
      name: Dimmer Device
      description: The Philips Hue Dimmer Switch paired with MQTT.
      selector:
        device:
          integration: mqtt
          entity:
            - domain: sensor
  source_url: https://github.com/thorgeir/home-assistant-automations/blob/main/blueprints/HueDimmerAreaControllBlueprint.yaml
mode: restart
max_exceeded: silent

variables:
  device_id: !input dimmer_device
  area: !input area

trigger:
  - platform: mqtt
    topic: "zigbee2mqtt/+/action"

condition:
  - condition: template
    value_template: >
      {{ trigger.topic == 'zigbee2mqtt/' ~ device_attr(device_id, 'name') ~ '/action' }}

action:
  - variables:
      payload: "{{ trigger.payload }}"
      lights: "{{ expand(area_entities(area_name(area))) | select('match', 'light') | list }}"
      lights_on_count: "{{ lights | selectattr('state', 'eq', 'on') | list | count }}"
      primary_light: "{{ lights | list | first }}"
      lights_temps: "{{ primary_light.attributes.color_temp if primary_light else 0 }}"
      group_scenes: "{{ expand(area_entities(area_name(area))) | select('match', 'scene') | list }}"
      scenes_count: "{{ group_scenes | length }}"
      # Determine next scene: first unseen, else cycle back to first
      next_scene: >
        {{ (
          (group_scenes | selectattr('state', 'eq', 'unknown') | list | first)
          or (group_scenes | list | first)
        ).entity_id if scenes_count > 0 else '' }}

  - choose:
      # Cycle scene on press when lights on
      - conditions:
          - condition: template
            value_template: >
              {{ payload in ['on_press_release', 'on'] and lights_on_count > 0 and scenes_count > 0 }}
        sequence:
          - service: scene.turn_on
            target:
              entity_id: "{{ next_scene }}"

      # Adjust color temperature down if above threshold
      - conditions:
          - condition: template
            value_template: >
              {{ payload in ['on_press_release', 'on']
                 and lights_on_count > 0
                 and lights_temps >= 450 }}
        sequence:
          - service: light.turn_on
            target:
              area_id: "{{ area }}"
            data:
              color_temp: 250

      # Adjust color temperature up if lights on
      - conditions:
          - condition: template
            value_template: >
              {{ payload in ['on_press_release', 'on'] and lights_on_count > 0 }}
        sequence:
          - service: light.turn_on
            target:
              area_id: "{{ area }}"
            data:
              color_temp: "{{ lights_temps + 25 }}"

      # On / Off / Toggle
      - conditions:
          - condition: template
            value_template: "{{ payload in ['on_press_release', 'on'] }}"
        sequence:
          - service: light.turn_on
            target:
              area_id: "{{ area }}"
      - conditions:
          - condition: template
            value_template: "{{ payload in ['off_press_release', 'off'] }}"
        sequence:
          - service: light.turn_off
            target:
              area_id: "{{ area }}"
      - conditions:
          - condition: template
            value_template: "{{ payload == 'toggle' }}"
        sequence:
          - service: light.toggle
            target:
              area_id: "{{ area }}"

      # Brightness control
      - conditions:
          - condition: template
            value_template: >
              {{ payload in ['up_press', 'brightness_up_click'] }}
        sequence:
          - service: light.turn_on
            target:
              area_id: "{{ area }}"
            data:
              brightness_step_pct: 9

      - conditions:
          - condition: template
            value_template: "{{ payload == 'up_hold' }}"
        sequence:
          - service: light.turn_on
            target:
              area_id: "{{ area }}"
            data:
              brightness_step_pct: 22

      - conditions:
          - condition: template
            value_template: >
              {{ payload in ['down_press', 'brightness_down_click'] }}
        sequence:
          - service: light.turn_on
            target:
              area_id: "{{ area }}"
            data:
              brightness_step_pct: -9

      - conditions:
          - condition: template
            value_template: "{{ payload == 'down_hold' }}"
        sequence:
          - service: light.turn_on
            target:
              area_id: "{{ area }}"
            data:
              brightness_step_pct: -22

      # Hold actions for full on/off brightness extremes
      - conditions:
          - condition: template
            value_template: >
              {{ payload in ['on_hold', 'brightness_up_hold'] }}
        sequence:
          - service: light.turn_on
            target:
              area_id: "{{ area }}"
            data:
              brightness: 255

      - conditions:
          - condition: template
            value_template: >
              {{ payload in ['off_hold', 'brightness_down_hold'] }}
        sequence:
          - service: light.turn_on
            target:
              area_id: "{{ area }}"
            data:
              brightness: 2
